generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(cuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @unique @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel  Channel[]
  messages Message[]
}

model Channel {
  id       String    @id @default(cuid())
  userId   String    @unique
  messages Message[]

  profileId String
  Profile   Profile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())

  robots Robot[]
}

model Robot {
  id          String   @id @default(cuid())
  name        String
  description String
  tempers     Temper[]
  imageUrl    String?  @db.Text
  exists      Boolean  @default(true)

  role      RobotRole
  channelId String
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
}

model Temper {
  id          String  @id @default(cuid())
  name        String
  description String
  Robot       Robot?  @relation(fields: [robotId], references: [id])
  robotId     String?
}

enum RobotRole {
  // USER // The person in the chatroom
  BAD_MIND // Robot role 1
  BAD_HANDS // Robot role 2
  BAD_ASS // Robot role 3
}

model Message {
  id      String  @id @default(cuid())
  text    String  @db.Text
  fileUrl String? @db.Text

  robotId   String?
  robot     Robot?   @relation(fields: [robotId], references: [id], onDelete: Cascade)
  profileId String?
  Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([robotId])
}
